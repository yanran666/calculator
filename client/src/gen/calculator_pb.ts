// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.js"
// @generated from file calculator.proto (package calculator.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message calculator.v1.CalculatorRequest
 */
export class CalculatorRequest extends Message<CalculatorRequest> {
  /**
   * @generated from field: double number1 = 1;
   */
  number1 = 0;

  /**
   * @generated from field: double number2 = 2;
   */
  number2 = 0;

  /**
   * @generated from field: string operator = 3;
   */
  operator = "";

  constructor(data?: PartialMessage<CalculatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "calculator.v1.CalculatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number1", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "number2", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "operator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalculatorRequest {
    return new CalculatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalculatorRequest {
    return new CalculatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalculatorRequest {
    return new CalculatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CalculatorRequest | PlainMessage<CalculatorRequest> | undefined, b: CalculatorRequest | PlainMessage<CalculatorRequest> | undefined): boolean {
    return proto3.util.equals(CalculatorRequest, a, b);
  }
}

/**
 * @generated from message calculator.v1.CalculatorResponse
 */
export class CalculatorResponse extends Message<CalculatorResponse> {
  /**
   * @generated from field: double result = 1;
   */
  result = 0;

  constructor(data?: PartialMessage<CalculatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "calculator.v1.CalculatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalculatorResponse {
    return new CalculatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalculatorResponse {
    return new CalculatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalculatorResponse {
    return new CalculatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CalculatorResponse | PlainMessage<CalculatorResponse> | undefined, b: CalculatorResponse | PlainMessage<CalculatorResponse> | undefined): boolean {
    return proto3.util.equals(CalculatorResponse, a, b);
  }
}

